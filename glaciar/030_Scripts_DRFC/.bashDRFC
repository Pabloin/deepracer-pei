echo "En DRFC"

# TODO

# Funcion que tome del Config y PISE ... 

alias SS="cd ~/deepracer-pei/glaciar/030_Scripts_DRFC/aws_scripts"
alias HH="cd ~/deepracer-pei/deepracer-for-cloud"
alias MMM="cd ~/MINIO_SYNC/DR-Qualifier"


export PATH_DRFC_Config=~/deepracer-pei/glaciar/010_Configs/DRFC_Configs
# ~/deepracer-pei/glaciar/010_Configs$ tree -La 2
#     .
#     ├── DOTS_Configs
#     │   ├── .config_DOTS_0001_orig
#     │   ├── .config_DOTS_000_reset
#     │   └── .config_DOTS_002_DE10
#     └── DRFC_Configs
#         ├── .config_DRFC_000_reset
#         ├── .config_DRFC_001_aws_orig
#         ├── .config_DRFC_001_local_orig
#         └── .config_DRFC_002_local_minio


alias D000="cd  ${PATH_DRFC_Config}/.config_DRFC_000_reset"
alias D001a="cd ${PATH_DRFC_Config}/.config_DRFC_001_aws_orig"
alias D001l="cd ${PATH_DRFC_Config}/.config_DRFC_001_local_orig"
alias D002="cd  ${PATH_DRFC_Config}/.config_DRFC_002_local_minio"



export PATH_DRFC_Models=~/deepracer-pei/glaciar/012_Models/DRFC_Models
# ~/deepracer-pei/glaciar/012_Models$ tree -La 4
#     .
#     ├── DOTS_Models
#     │   └── Readme.md
#     └── DRFC_Models
#         ├── Readme.md
#         └── T2024-01
#             └── DR-Qualifier
#                 └── .config_DE10

echo "BASH_DRFC_ALIAS"
export BASH_DRFC_ALIAS=~/deepracer-pei/glaciar/030_Scripts_DRFC

if [ -f "$BASH_DRFC_ALIAS/.bashDRFC_alias" ]; then
    echo "Hola"
    . "$BASH_DRFC_ALIAS/.bashDRFC_alias"
else 
    echo "nosta"

fi

# REPETIDA CON DOTS (Mantener sincro iguales)
function prof() {

    PROF_UBUNTU=~/.profile

    if [ -f ${PROF_UBUNTU} ]; then
        source ${PROF_UBUNTU}
    fi
}

function gita() {
    git add ~/deepracer-pei/glaciar/012_Models/DRFC_Models/T2024-03/DR-Analysis/
    git commit -m "Update Analysis" 
    git push
}

function setx() {
    ls -la 
    chmod +x xSet*.sh
    chmod +x cron*.sh
    ls -la 
    git add xSet*.sh; git commit -m "setx"; git push
    git add cron*.sh; git commit -m "cron"; git push
}


function ee3() {
    grep  ^DR_ ~/deepracer-pei/deepracer-for-cloud/$1 | grep $2
}


function ee4() {
    echo -e "\n---- [ run.env ] ---\n"

    ee3 run.env  DR_WORLD_NAME=
    ee3 run.env  DR_LOCAL_S3_MODEL_PREFIX=
    ee3 run.env  DR_LOCAL_S3_PRETRAINED=
    ee3 run.env  DR_LOCAL_S3_PRETRAINED_PREFIX=
    ee3 run.env  DR_LOCAL_S3_PRETRAINED_CHECKPOINT=

    echo -e "\n---- [ system.env ] ---\n"

    ee3 system.env DR_UPLOAD_S3_BUCKET=
    ee3 system.env DR_UPLOAD_S3_ROLE=
    ee3 system.env DR_LOCAL_S3_BUCKET=
    ee3 system.env DR_LOCAL_S3_PROFILE=


    echo -e "\n---- [ TRAIN ] ---\n"

    ee3 system.env DR_WORKERS=
    ee3 run.env    DR_TRAIN_ROUND_ROBIN_ADVANCE_DIST=

    grep num_episodes_between_training ~/deepracer-pei/deepracer-for-cloud/custom_files/hyperparameters.json 

}

export PATH=$PATH:$HOME/minio-binaries/


cat ~/.aws/config | grep profile

echo ""


sudo chown ubuntu  ~/hello.txt
sudo chgrp ubuntu  ~/hello.txt


alias hello="vim  ~/hello.txt"
alias hellos="cat ~/hello.txt"

alias   C="vim ~/.aws/credentials"

alias costos="cd ~/deepracer-pei/glaciar/030_Scripts_DRFC/aws_scripts/"


S3_SMINIO_SOURCE=~/MINIO_SYNC
# S3_SMINIO_SERVER=local
S3_SMINIO_SERVER=myminio
S3_SMINIO_BUCKET=bucket-models-2024-03


S3_BUCKET_TARGET=dr-models-glaciar-dots-to-pabloedu-gmail
PROFILE_PEZE_EDU=bastion_PEZE_DRFC_CPU
PROFILE_LAB_ROLE=arn:aws:iam::307424703238:role/LabRole

# KEY_MODEL=Ulab-Tracks
# KEY_MODEL=Spot-Tracks
KEY_MODEL=DR-Qualifier


#---[Api mm()  ]-----------------------------------

export MM_HOME=~/deepracer-pei/deepracer-for-cloud/data/minio/bucket-models-2024-03/DR-Qualifier
alias MM="cd   ~/deepracer-pei/deepracer-for-cloud/data/minio/bucket-models-2024-03/DR-Qualifier"



function mmS3() {

cat << EOM_S3_HELP
   HELP S3:
   aws s3 ls s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/                      --profile  ${PROFILE_PEZE_EDU}
   aws s3 rm s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/LUZ-NNNN --recursive  --profile  ${PROFILE_PEZE_EDU}
EOM_S3_HELP
}

function mmUp() {

    echo "mmDown sube de minio el raw ... es decir podría servir como backup para recupera en otro minio... "
    echo "... pero el RAW no me sirve para hacer el import ...o sea... volver a usar spUp spDown -- spImportMM"

    # NOTA: Sacar el tab si alguna vez lo descomento ... 

    # cat << EOM_DESTINO
    #     DESTINO:
    #     aws s3 ls s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/  --profile  ${PROFILE_PEZE_EDU} 
    # EOM_DESTINO
    #     aws s3 ls s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/  --profile  ${PROFILE_PEZE_EDU} 

    # cat << EOM_ORIGEN
    #     ORIGEN:
    #     ls -la ${MM_HOME}
    # EOM_ORIGEN
    #     ls -la ${MM_HOME}


    #     read -p "¿Folder Model to S3?  (Ejemplo:  "LUZ-101b" ? "   MODEL_FOLDER

    # cat << EOM
    #     aws s3 sync  ${MM_HOME}/${MODEL_FOLDER}   
    #             s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/${MODEL_FOLDER}   
    #                     --profile ${PROFILE_PEZE_EDU}    
    # EOM

    #     read -p "Hacemos UP? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || return 1

    #     aws s3 sync  ${MM_HOME}/${MODEL_FOLDER}  \
    #             s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/${MODEL_FOLDER}  \
    #                     --profile ${PROFILE_PEZE_EDU}    

    #     cd ~/deepracer-pei/deepracer-for-cloud

}

function mmDown() {

    echo "mmDown no tiene Sentido porque no se puede bajar a minio directo ... "
    echo "usar solo mmUpNN y spImportMM"

    # NOTA: Sacar el tab si alguna vez lo descomento ... 

    # cat << EOM_DESTINO
    #     DESTINO:
    #     ls -la ${MM_HOME}
    # EOM_DESTINO
    #     ls -la ${MM_HOME}

    # cat << EOM_ORIGEN
    #     ORIGEN:
    #     aws s3 ls s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/  --profile  ${PROFILE_PEZE_EDU} 
    # EOM_ORIGEN

    #     aws s3 ls s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/  --profile  ${PROFILE_PEZE_EDU} 

    #     read -p "¿Folder Model in S3?  (Ejemplo:  "LUZ-101b" ? "   MODEL_FOLDER


    # cat << EOM
    #     aws s3 sync s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/${MODEL_FOLDER} 
    #                      ${MM_HOME}/${MODEL_FOLDER} 
    #                      --profile ${PROFILE_PEZE_EDU}
    # EOM

    #     read -p "Hacemos Down? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || return 1

    #     aws s3 sync s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/${MODEL_FOLDER}  \
    #                      ${MM_HOME}/${MODEL_FOLDER}  \
    #                      --profile ${PROFILE_PEZE_EDU}

}


function PRE_CONTEXT_RACER2() {
    S3_BUCKET_TARGET=dr-models-racer2-dots-to-pabloedu-gmail
    PROFILE_PEZE_EDU=racer2    
    PROFILE_LAB_ROLE=arn:aws:iam::590184033458:role/AWSDeepRacerAccessRole
}

function PRE_CONTEXT_GLACIAR() {
    S3_BUCKET_TARGET=deepracer-forcloud-glaciar
    PROFILE_PEZE_EDU=glaciar    
    PROFILE_LAB_ROLE=arn:aws:iam::845305768689:role/service-role/AWSDeepRacerAccessRole
}



function PRE_CONTEXT_LUZ() {
    S3_BUCKET_TARGET=dr-models-luz-to-peze-edu
    PROFILE_PEZE_EDU=luz    
    PROFILE_LAB_ROLE=arn:aws:iam::559093250226:role/LabRole
}
function POST_CONTEXT_PEZE_EDU() {
    S3_BUCKET_TARGET=dr-models-glaciar-dots-to-pabloedu-gmail
    PROFILE_PEZE_EDU=bastion_PEZE_DRFC_CPU
    PROFILE_LAB_ROLE=arn:aws:iam::307424703238:role/LabRole
}


#---[Models To Glaciar  ]-----------------------------------

function mmUpGlaciar() {
    PRE_CONTEXT_GLACIAR
    mmUp
    POST_CONTEXT_PEZE_EDU
}
function mmDownGlaciar() {
    PRE_CONTEXT_GLACIAR
    mmDown
    POST_CONTEXT_PEZE_EDU
}

function spImportGlaciar() {
    PRE_CONTEXT_GLACIAR
    spImport
    POST_CONTEXT_PEZE_EDU
}

#---[Api sp()  ]-----------------------------------

function mmUpLuz() {
    PRE_CONTEXT_LUZ
    mmUp
    POST_CONTEXT_PEZE_EDU
}

function mmDownLuz() {
    PRE_CONTEXT_LUZ
    mmDown
    POST_CONTEXT_PEZE_EDU
}

function spImportLuz() {
    PRE_CONTEXT_LUZ
    spImport
    POST_CONTEXT_PEZE_EDU
}

function spImportRacer2() {
    PRE_CONTEXT_RACER2
    spImport
    POST_CONTEXT_PEZE_EDU
}
#---[Api sp()  ]-----------------------------------

function spUp() {

cat << EOM
    cd           ${S3_SMINIO_SOURCE}/${KEY_MODEL}       

    ls -la
EOM
        

    cd  ${S3_SMINIO_SOURCE}/${KEY_MODEL} 
    
    ls -la

    read -p "¿Folder Model to S3?  (Ejemplo:  "LUZ-101b" ? "   MODEL_FOLDER

cat << EOM
    aws s3 sync  ${S3_SMINIO_SOURCE}/${KEY_MODEL}/${MODEL_FOLDER} 
            s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/${MODEL_FOLDER}    
                   --profile ${PROFILE_PEZE_EDU}   

EOM
    read -p "Hacemos UP? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || return 1

    aws s3 sync  ${S3_SMINIO_SOURCE}/${KEY_MODEL}/${MODEL_FOLDER}  \
            s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/${MODEL_FOLDER}  \
                    --profile ${PROFILE_PEZE_EDU}    
    

}


function spDown_S3() {

cat << EOM
    aws s3 ls s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/ 
                 --profile  ${PROFILE_PEZE_EDU}        

EOM

    aws s3 ls s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/  \
             --profile  ${PROFILE_PEZE_EDU} 

    read -p "¿Folder Model S3?  (Ejemplo:  "LUZ-101b"     ? "   MODEL_FOLDER

cat << EOM

    cd          ${S3_SMINIO_SOURCE}/${KEY_MODEL}
    ls -la      ${S3_SMINIO_SOURCE}/${KEY_MODEL}
                  
    aws s3 sync   \
           s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/${MODEL_FOLDER} 
                ${S3_SMINIO_SOURCE}/${KEY_MODEL}/${MODEL_FOLDER} 
                --profile  ${PROFILE_PEZE_EDU}

EOM

    
    echo "Esto tenemos en destion: "
    cd      ${S3_SMINIO_SOURCE}/${KEY_MODEL} 
    ls -la  ${S3_SMINIO_SOURCE}/${KEY_MODEL} 
    echo " "

    read -p "Hacemos DOWN S3 ? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || return 1

    aws s3 sync s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/${MODEL_FOLDER}  \
                     ${S3_SMINIO_SOURCE}/${KEY_MODEL}/${MODEL_FOLDER}  \
                     --profile ${PROFILE_PEZE_EDU}

}

# Down de local Minio
function spDown_Minio() {

    MINIO_HOME=${S3_SMINIO_SERVER}/${S3_SMINIO_BUCKET}/${KEY_MODEL}

cat << EOM
    mc ls ${MINIO_HOME}
EOM

    mc ls ${MINIO_HOME}    

    read -p "¿Modelo Version Name?  (Ejemplo: "lgy-model-NNN" o "aws-beast-nnn"? " MODEL_FOLDER
    
cat << EOM
    
    mc cp ${MINIO_HOME}/${MODEL_FOLDER}
          ${S3_SMINIO_SOURCE}/${KEY_MODEL}/ --recursive

    cd  ${S3_SMINIO_SOURCE}/${KEY_MODEL}

    ls -la

EOM


    mc cp ${MINIO_HOME}/${MODEL_FOLDER} \
          ${S3_SMINIO_SOURCE}/${KEY_MODEL}/ --recursive

    cd  ${S3_SMINIO_SOURCE}/${KEY_MODEL}

}

# Upload to local Minio
function spUp_Minio() {


    # OJO ...
    # Que capaz lo puedo copiar directo en el folder de data: (y mucho mas facil..)
    # ~/deepracer-pei/deepracer-for-cloud/data/minio/bucket-models-2024-03/DR-Qualifier

    MINIO_HOME=${S3_SMINIO_SERVER}/${S3_SMINIO_BUCKET}/${KEY_MODEL}

    echo " "
    echo " DESTINO:  mc ls ${MINIO_HOME} "

    mc ls ${MINIO_HOME}

    echo " ORIGEN:  ls -a ~/MINIO_SYNC/DR-Qualifier "

    ls -a ~/MINIO_SYNC/DR-Qualifier

    cd ~/MINIO_SYNC/DR-Qualifier

    echo " "

    read -p "¿Folder to Minio?  (Ejemplo: "LUZ-101b" ? " MODEL_FOLDER

    echo "                                                          "
    echo "  mc cp ${MODEL_FOLDER}   ${MINIO_HOME}  --recursive      "
    echo "                                                          "
    
    mc cp ${MODEL_FOLDER}   ${MINIO_HOME}  --recursive
}


function spImport() {

    aws deepracer list-models --model-type REINFORCEMENT_LEARNING  \
                 --query 'Models[].{ModelArn: ModelArn, ModelName: ModelName} '  \
                 --profile  ${PROFILE_PEZE_EDU}     \
                 --output table

    echo "  "
    echo "  aws s3 ls s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/  \               "
    echo "               --profile  ${PROFILE_PEZE_EDU}           "
    echo "  "

    aws s3 ls s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/  \
                 --profile  ${PROFILE_PEZE_EDU} 


    read -p "¿Folder Modelo S3/minio ?  (Ejemplo:  "LUZ-001"       ? " MODEL_FOLDER
    read -p "¿Alias  Modelo Name     ?  (Ejemplo:  "LUZ-001-Wip01" ? " MODEL_NAME_ALIAS

    echo "   "
    echo "  aws deepracer import-model \                 "
    echo "      --type REINFORCEMENT_LEARNING \          "
    echo "      --name ${MODEL_NAME_ALIAS}  \                 "
    echo "      --model-artifacts-s3-path s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/${MODEL_FOLDER} \ "
    echo "      --role-arn ${PROFILE_LAB_ROLE} \      "
    echo "      --region   us-east-1 \                     " 
    echo "      --profile  ${PROFILE_PEZE_EDU}               "
    echo "   "

    read -p "Hacemos spImport? Todo Ok? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || return 1

    aws deepracer import-model \
        --type REINFORCEMENT_LEARNING \
        --name ${MODEL_NAME_ALIAS}  \
        --model-artifacts-s3-path s3://${S3_BUCKET_TARGET}/${KEY_MODEL}/${MODEL_FOLDER} \
        --role-arn ${PROFILE_LAB_ROLE} \
        --region   us-east-1 \
        --profile  ${PROFILE_PEZE_EDU}               
   
}

function spUpRacer2() {
    PRE_CONTEXT_RACER2
    spUp
    POST_CONTEXT_PEZE_EDU
}

function spUpGlaciar() {
    PRE_CONTEXT_GLACIAR
    spUp
    POST_CONTEXT_PEZE_EDU
}

function spUpLuz() {
    PRE_CONTEXT_LUZ
    spUp
    POST_CONTEXT_PEZE_EDU
}

function spDown_S3Luz() {
    PRE_CONTEXT_LUZ
    spDown_S3
    POST_CONTEXT_PEZE_EDU
}

function spDown_S3Glaciar() {
    PRE_CONTEXT_GLACIAR
    spDown_S3
    POST_CONTEXT_PEZE_EDU
}

function spDown_S3Racer2() {
    PRE_CONTEXT_RACER2
    spDown_S3
    POST_CONTEXT_PEZE_EDU
}

function drActivate() {

    source ~/deepracer-pei/deepracer-for-cloud/bin/activate.sh
}

function drAll() {
    dr-update;
    dr-upload-custom-files;
    crontab_racer;
}

function drLuz() {
    
    ~/deepracer-pei/glaciar/012_Models/DRFC_Models/T2024-03/DR-Qualifier/.config_LUZ-001/xSet.sh

    dr-update;
    dr-upload-custom-files;
    
}

function crontab_racer() {
        
    MY_CRON_DIR=~/deepracer-pei/glaciar/012_Models/DRFC_Models/T2024-03/DR-Qualifier/.config_Pg3-0300

    CRON_STEPS=80
    CRON_TOTAL=360
    #CRON_TOTAL=420
    #CRON_TOTAL=480
    CRON_HORAS=$((${CRON_TOTAL} / 60))
    CANT_STEPS=$((${CRON_TOTAL} / ${CRON_STEPS}))

    MY_TIME=$(date +%Y-%m-%dT%H:%M:%S)

    echo -e "CRONTAB Sugerido para: ${MY_TIME} "
    echo -e "    --- Crontab de ${CRON_TOTAL} Minutos = ${CRON_HORAS} horas \n"

    INDICE=0 
    for T in `seq -w ${CRON_STEPS} ${CRON_STEPS} ${CRON_TOTAL}`; 
    do
        MY_DATE_INIT=$(date   +%M\ %H\ %d\ %m  --date="  +${T} minutes")

        MODEL_NAME=Fase

        if [[ "${INDICE}" == "0"             ]]; then MODEL_VERSION=Inicial;  fi
        if [[ "${INDICE}" == "${CANT_STEPS}" ]]; then MODEL_VERSION=Final;  fi

        echo "${MY_DATE_INIT} *  source ${MY_CRON_DIR}/cron_files/cron_fases.sh MM${MODEL_NAME}_${T}"

        INDICE=$(( INDICE + 1 ))
    done
  
    echo "${MY_DATE_INIT} *  source ${MY_CRON_DIR}/cron_files/cron_fases.sh Close_${CRON_TOTAL}"
}

##--------------------
AWS_CLI_PROFILE=default

function aws.ec2.run() {

cat << EOM
    # aws.ec2.run
    #     Se EJECUTA:

    aws ec2 describe-instances --filters Name=instance-state-name,Values=running  
          --query 'Reservations[].Instances[*].{InstanceType: InstanceType, InstanceId: InstanceId, State: State.Name, Placement: Placement.AvailabilityZone }'  
          --output table 
          --profile ${AWS_CLI_PROFILE}  
EOM
    aws s3 ls --profile ${AWS_CLI_PROFILE} | grep config


    aws ec2 describe-instances --filters Name=instance-state-name,Values=running  \
          --query 'Reservations[].Instances[*].{InstanceType: InstanceType, InstanceId: InstanceId, State: State.Name, Placement: Placement.AvailabilityZone }'  \
          --output table \
          --profile ${AWS_CLI_PROFILE}
}


function aws.ec2.all() {

cat << EOM
    # aws.ec2.all
    #     Se Utiliza: ${AWS_CLI_PROFILE}
EOM
  aws s3 ls  | grep config


  REGIONS=`aws ec2 describe-regions --region us-east-1 --output text --query Regions[*].[RegionName]`

  REGIONS_PEI='us-east-1 af-south-1 sa-east-1 eu-north-1'
  for REGION in $REGIONS_PEI
  do
    echo -e "\nInstances in '$REGION'..";
    aws ec2 describe-instances --region $REGION | \
      jq '.Reservations[].Instances[] | "EC2: \(.InstanceId): \(.State.Name) \(.InstanceType)  "'
  done
}



function aws.ec2.run.luz() {

    AWS_CLI_PROFILE=luz
    
    aws.ec2.run  

    echo " Para detener:"
    echo "          "
    echo " aws ec2 stop-instances --profile ${AWS_CLI_PROFILE} --instance-ids id-todelete    "
    echo "                                                "
    
    AWS_CLI_PROFILE=default

}


function help_linux() {

cat << EOM
    du -hs */
    du -cksh *
    du -h -d 1
EOM

}


##----------------------------

function menu() {

cat << EOM

menu, $1!

Estoy en  ~/deepracer-pei/glaciar/030_Scripts_DRFC/.bashDRFC

    - prof - setx - hello - doing - costos

    - SPOT (Minio): spDown_Minio  | spUp        | spImport 
                    spDown_S3     | spUpLuz     | spImportLuz
                    spDown_S3Luz  | -           | -
                    mmDown        | mmUp        | 
                    mmDownLuz     | mmUpLuz     | spImportLuz
                    mmDownGlaciar | mmUpGlaciar | spImportGlaciar

    - aws.ec2.run | aws.ec2.all 
    - crontab_racer
    
    
    # - drSync      |  drDown     | drUp  | TBD - logs | model 
    # - drImport    | drImportGlaciar 
    # - goVirginia  | _set _getRegion  


    alias - C | HH SS MM MMM | 
    
                        # B01 (B,C,D) | F01 | F02 | F02C,D,H,T,W | A01 a,b,c,d..  



    -------------------------------------------------------- 
    S3_SMINIO_SOURCE=${S3_SMINIO_SOURCE}
    S3_BUCKET_TARGET=${S3_BUCKET_TARGET}
    S3_SMINIO_BUCKET=${S3_SMINIO_BUCKET}
    MODEL = ${KEY_MODEL}  

EOM


    cat ~/.aws/config | grep profile

    echo ""

}

menu



function doing() {

    # The string after << indicates where to stop.
    cat << EOM 
    
    DOING:

    - pablo-eze-edu: Spots ... TBD ... 
    
    # jupyter notebook como servicio
    

    STATUS:
    -           JLab | Ubuntu | TBD | TBD |

    - PEZEG  |   X   |    X   |  -  |  100% config ... USD 9 gastado
    - DEMET  |   X   |    X   |  -  |  100% config ... USD 0 gastado

    - Notas... 
    

EOM
}
# doing



cat << EOM > ~/my_ubuntu_golden.sh

# Echo FIXEX para que anden la instancia Golden

sudo chown ubuntu  ~/hello.txt
sudo chgrp ubuntu  ~/hello.txt

cd ~/deepracer-pei/deepracer-for-cloud
git pull

# Update Hello text
# vim ~/.aws/config     con san-pablo  (sa-east-1)
# vim ~/.aws/credential con racer1


# Para que ande sagemaker
sudo service docker stop 
sudo service docker start

# quizá docker kill el container de  awsdeepracercommunity/deepracer-sagemaker:5.1.1-gpu 
# docker ps -a
# docker kill id

# Para que ande minio (los mismos que - aws default - en mi caso racer1)
mc alias set myminio/   http://127.0.0.1:9000  Minio_USER  Minio_PASS



# Lanzar de nuevo a DRFC (lo pude lanzar sin el "prepare" pero necesitó activate y docker restart)
# docker stop/start
# activate
# los update
# train ...


EOM



echo " .bashDRFC reload " 

